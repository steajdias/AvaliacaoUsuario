# -*- coding: utf-8 -*-
"""SentimentoBagOfWords.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WxE17P9S1ShhWff0imo3ycUBl_3zCNcY
"""

import pandas as pd
import re
from sklearn.feature_extraction.text import CountVectorizer

# Leitura do arquivo com uma base de dados que diz quais palavras podem ter uma polaridade negativa ou positiva
file_path = '/content/SentiLex-lem-PT02.txt'
entries = []

with open(file_path, 'r', encoding='utf-8') as file:
    for line in file:
        try:
            lemma, info = line.strip().split('.', 1)
            entry_parts = info.split(';')
            pos = entry_parts[0].split('=')[1]
            target = entry_parts[1].split('=')[1]
            polarity = entry_parts[2].split('=')[1]
            annotation = entry_parts[3].split('=')[1]
            entries.append((lemma, pos, target, int(polarity), annotation))
        except ValueError:
            pass

# Criar DataFrame
df = pd.DataFrame(entries, columns=['Lemma', 'POS', 'Target', 'Polarity', 'Annotation'])

# Filtrar apenas as palavras com polaridade positiva ou negativa
df_filtered = df[(df['Polarity'] == 1) | (df['Polarity'] == -1)]

# Importar bibliotecas necessárias
from sklearn.feature_extraction.text import CountVectorizer

# Criar uma representação Bag of Words para as palavras
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(df_filtered['Lemma'])

# Adicionar coluna 'Polarity' ao DataFrame Bag of Words
df_bag_of_words = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names_out())
df_bag_of_words['Polarity'] = df_filtered['Polarity']

# Exibir as primeiras linhas da matriz Bag of Words
print("Matriz Bag of Words Head:")
print(df_bag_of_words.head())

def consultar_polaridade(palavra, df_filtered):
    palavra = palavra.lower()
    polaridade = df_filtered[df_filtered['Lemma'].str.lower() == palavra]['Polarity'].iloc[0] if not df_filtered[df_filtered['Lemma'].str.lower() == palavra].empty else 0
    return polaridade

# Lista de stopwords comuns em português
stopwords = ["o", "a", "os", "as", "e", "é", "um","mas", "uma", "até", "uns", "umas", "de", "do", "da", "dos", "das", "em", "no", "na", "nos", "nas", "por", "para", "com", "sem", "como", "quando"]

# Frase para avaliar
frase_para_avaliar = """"Embora tenha considerado desistir do estudo em Processamento de Linguagem Natural (PLN) devido à sua complexidade,
            a experiência transformadora do curso ministrado por Stephanie me surpreendeu positivamente. O conteúdo desafiador foi apresentado de
            maneira envolvente e acessível, proporcionando não apenas um entendimento mais profundo dos temas intricados, mas também despertando um
            entusiasmo genuíno pelo campo. O curso não apenas superou minhas expectativas, mas também revelou a fascinante interseção entre teoria e
            prática, tornando o aprendizado não apenas educativo, mas também incrivelmente divertido. Quem poderia imaginar que a exploração do PLN se
            tornaria uma jornada tão estimulante e recompensadora?"""

# Tokenizar a frase e remover stopwords personalizadas
palavras_tokenizadas = [palavra.lower() for palavra in re.findall(r'\b\w+\b', frase_para_avaliar) if palavra.lower() not in stopwords]

# Filtrar apenas as palavras presentes na matriz Bag of Words
palavras_no_vocabulario = [palavra for palavra in palavras_tokenizadas if palavra in df_bag_of_words.columns]

# Calcular a polaridade da frase com base nas polaridades individuais das palavras
polaridades_individuais = [consultar_polaridade(palavra, df_filtered) for palavra in palavras_no_vocabulario]
polaridade_frase = sum(polaridades_individuais)

# Determinar a polaridade da frase
if polaridade_frase > 0:
    polaridade_frase = 1
elif polaridade_frase < 0:
    polaridade_frase = -1
else:
    polaridade_frase = 0

# Imprimir informações sobre cada palavra na frase
print("\nInformações sobre cada palavra na frase:")
for palavra, polaridade in zip(palavras_no_vocabulario, polaridades_individuais):
    print(f"Palavra: '{palavra}', Polaridade: {polaridade}")

# Imprimir o resultado da previsão da frase
print(f"\nPolaridade da Frase: {polaridade_frase}")

# ...

# Imprimir o resultado da previsão da frase
print(f"\nPolaridade da Frase: {polaridade_frase}")

# Bloco de código adicional para mostrar a representação Bag of Words das palavras na frase
print("\nMatriz de Contagem de Palavras na Frase:")
# Criar um DataFrame com a contagem de cada palavra na frase
df_contagem_palavras = pd.DataFrame(data=[contagem_palavras], columns=contagem_palavras.keys())

# Exibir a matriz de contagem de palavras
print(df_contagem_palavras)